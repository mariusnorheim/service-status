generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String    @db.NVarChar(100)
  content   String?   @db.NVarChar(Max)
  published Boolean   @default(false)
  createdAt DateTime  @default(now()) @map(name: "created_at")
  serviceId Int?
  authorId  Int?
  service   Service?  @relation(fields: [serviceId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  author    User?     @relation(fields: [authorId], references: [id])
}

model Service {
  id              Int      @id @default(autoincrement())
  name            String   @db.NVarChar(100)
  description     String?  @db.NVarChar(250)
  endpoint        String   @db.NVarChar(150)
  auth_login      String?  @db.NVarChar(50)
  auth_password   String?  @db.NVarChar(1000)
  displayPriority Int      @default(0)
  published       Boolean  @default(false)
  createdAt       DateTime @default(now()) @map(name: "created_at")
  updatedAt       DateTime @default(now()) @map(name: "updated_at")
  authorId        Int
  author          User     @relation(fields: [authorId], references: [id])
  status          Status?
  posts           Post[]
}

model Status {
  id              Int      @id @default(autoincrement())
  code            Int      @default(0)
  message         String?  @db.NVarChar(250)
  createdAt       DateTime @default(now()) @map(name: "created_at")
  serviceId       Int
  service         Service  @relation(fields: [serviceId], references: [id])
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.NVarChar(Max)
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}
model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  services      Service[]
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
